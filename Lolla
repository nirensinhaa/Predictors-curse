from zipfile import ZipFile
import os

# Create a directory to hold the files for the new dark-themed version
output_dir = "/mnt/data/Predictors_Curse_Dark_UI"
os.makedirs(output_dir, exist_ok=True)

# Define HTML, CSS, and JS content with dark theme applied
index_html = """
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>The Predictor's Curse</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <div class="container">
        <h1>The Predictor's Curse</h1>
        <input type="text" id="multiplierInput" placeholder="Enter crash multiplier">
        <button onclick="addMultiplier()">Add Result</button>
        <button onclick="resetList()">Reset</button>
        <ul id="multiplierList"></ul>
        <p id="predictionOutput"></p>
    </div>
    <script src="script.js"></script>
</body>
</html>
"""

style_css = """
body {
    background-color: #000000;
    color: #00ff88;
    font-family: 'Courier New', Courier, monospace;
    margin: 0;
    padding: 20px;
    text-align: center;
}
.container {
    max-width: 500px;
    margin: auto;
}
h1 {
    color: #39ff14;
}
input, button {
    margin: 10px;
    padding: 10px;
    font-size: 16px;
    background-color: #1e1e1e;
    color: #00ff88;
    border: 1px solid #00ff88;
    border-radius: 5px;
}
button:hover {
    background-color: #39ff14;
    color: #000;
}
ul {
    list-style-type: none;
    padding: 0;
}
"""

script_js = """
const multipliers = [];
function addMultiplier() {
    const input = document.getElementById('multiplierInput').value;
    const value = parseFloat(input);
    if (!isNaN(value)) {
        multipliers.push(value);
        updateList();
        predictNext();
    }
    document.getElementById('multiplierInput').value = '';
}
function updateList() {
    const list = document.getElementById('multiplierList');
    list.innerHTML = '';
    multipliers.slice(-10).forEach(m => {
        const li = document.createElement('li');
        li.textContent = m;
        list.appendChild(li);
    });
}
function predictNext() {
    const avg = multipliers.slice(-10).reduce((a, b) => a + b, 0) / multipliers.slice(-10).length;
    let prediction = 'Prediction: ';
    if (avg < 2) prediction += 'Crash likely soon (low avg)';
    else if (avg < 10) prediction += 'Moderate run ongoing';
    else prediction += 'High multiplier streak possible';
    document.getElementById('predictionOutput').textContent = prediction;
}
function resetList() {
    multipliers.length = 0;
    updateList();
    document.getElementById('predictionOutput').textContent = '';
}
"""

# Write the files to the output directory
with open(f"{output_dir}/index.html", "w") as f:
    f.write(index_html)
with open(f"{output_dir}/style.css", "w") as f:
    f.write(style_css)
with open(f"{output_dir}/script.js", "w") as f:
    f.write(script_js)

# Create a zip file for download
zip_path = "/mnt/data/Predictors_Curse_Dark_UI.zip"
with ZipFile(zip_path, 'w') as zipf:
    for file_name in ["index.html", "style.css", "script.js"]:
        zipf.write(os.path.join(output_dir, file_name), arcname=file_name)

zip_path
